name: RDP with Persistent Storage

on:
  workflow_dispatch:

env:
  PERSISTENT_HOSTNAME: "my-permanent-rdp"
  BACKUP_BUCKET: "rdp-backup-bucket"
  CONFIG_VERSION: "v2"

jobs:
  rdp-server:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
    - name: Setup Persistent Environment
      run: |
        # إنشاء مجلدات للبيانات المستديمة
        $persistentDirs = @(
            "C:\PersistentData",
            "C:\PersistentData\Desktop",
            "C:\PersistentData\Documents", 
            "C:\PersistentData\Downloads",
            "C:\PersistentData\Configs",
            "C:\PersistentData\Software"
        )
        
        foreach ($dir in $persistentDirs) {
            New-Item -ItemType Directory -Path $dir -Force
        }
        
        echo "PERSISTENT_ROOT=C:\PersistentData" >> $env:GITHUB_ENV

    - name: Download Previous Session Data
      run: |
        # محاولة تحميل البيانات من الجلسة السابقة
        $backupUrl = "https://github.com/${{ github.repository }}/releases/download/rdp-backup/session-backup.zip"
        try {
            Write-Host "🔄 Downloading previous session data..." -ForegroundColor Yellow
            Invoke-WebRequest -Uri $backupUrl -OutFile "$env:TEMP\session-backup.zip" -TimeoutSec 30
            Expand-Archive -Path "$env:TEMP\session-backup.zip" -DestinationPath "C:\PersistentData\" -Force
            Write-Host "✅ Previous session data restored" -ForegroundColor Green
            
            # تحميل إعدادات النظام
            if (Test-Path "C:\PersistentData\Configs\system-settings.reg") {
                reg import "C:\PersistentData\Configs\system-settings.reg" 2>$null
                Write-Host "✅ System settings restored" -ForegroundColor Green
            }
        } catch {
            Write-Host "ℹ️ No previous data found, starting fresh session" -ForegroundColor Cyan
        }

    - name: Install Tailscale with Persistent Identity
      run: |
        # تثبيت Tailscale
        $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi"
        $installerPath = "$env:TEMP\tailscale.msi"
        Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
        Start-Process msiexec.exe -ArgumentList "/i", "$installerPath", "/quiet", "/norestart" -Wait
        Start-Sleep -Seconds 10

        # محاولة استخدام هوية سابقة
        if (Test-Path "C:\PersistentData\Configs\tailscale-state") {
            Copy-Item "C:\PersistentData\Configs\tailscale-state\*" "C:\ProgramData\Tailscale\" -Recurse -Force
            Write-Host "🔄 Restored previous Tailscale state" -ForegroundColor Cyan
        }

        # الاتصال مع اسم مضيف ثابت
        & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=$env:PERSISTENT_HOSTNAME --accept-routes --reset
        Start-Sleep -Seconds 10
        
        $tailscaleIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
        $fullHostname = & "$env:ProgramFiles\Tailscale\tailscale.exe" status --json | ConvertFrom-Json | Select-Object -ExpandProperty Self | Select-Object -ExpandProperty DNSName
        
        echo "TAILSCALE_IP=$tailscaleIP" >> $env:GITHUB_ENV
        echo "FULL_HOSTNAME=$fullHostname" >> $env:GITHUB_ENV

        # حفظ حالة Tailscale
        Copy-Item "C:\ProgramData\Tailscale\*" "C:\PersistentData\Configs\tailscale-state\" -Recurse -Force -ErrorAction SilentlyContinue

    - name: Configure RDP with Persistent Settings
      run: |
        # تفعيل RDP
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
        
        # فتح المنافذ
        $ports = @(3389, 5555, 7777, 8888, 9999)
        foreach ($port in $ports) {
            netsh advfirewall firewall add rule name="RDP-$port" dir=in action=allow protocol=TCP localport=$port
        }
        
        # إنشاء/تحديث المستخدم
        $password = "!QA2ws3ed"
        $securePass = ConvertTo-SecureString $password -AsPlainText -Force
        
        # حذف المستخدم إذا موجود وإنشاؤه جديد
        Remove-LocalUser -Name "RDP" -ErrorAction SilentlyContinue
        New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
        Add-LocalGroupMember -Group "Administrators" -Member "RDP"
        Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
        
        # ربط المجلدات المستديمة بالمستخدم
        cmd.exe /c "mklink /J C:\Users\RDP\Desktop C:\PersistentData\Desktop" 2>$null
        cmd.exe /c "mklink /J C:\Users\RDP\Documents C:\PersistentData\Documents" 2>$null
        cmd.exe /c "mklink /J C:\Users\RDP\Downloads C:\PersistentData\Downloads" 2>$null
        
        Restart-Service -Name TermService -Force

    - name: Install Persistent Software
      run: |
        # قائمة البرامج الأساسية
        $essentialSoftware = @(
            "Google.Chrome",
            "Mozilla.Firefox",
            "Microsoft.VisualStudioCode",
            "Notepad++.Notepad++",
            "7zip.7zip",
            "VideoLAN.VLC",
            "Python.Python.3.11"
        )
        
        # تثبيت البرامج إذا لم تكن مثبتة
        foreach ($app in $essentialSoftware) {
            $isInstalled = winget list --id $app --exact 2>$null
            if (-not $isInstalled) {
                Write-Host "📦 Installing $app..." -ForegroundColor Yellow
                winget install --id $app --silent --accept-package-agreements --accept-source-agreements
            } else {
                Write-Host "✅ $app already installed" -ForegroundColor Green
            }
        }
        
        # حفظ قائمة البرامج المثبتة
        winget list > "C:\PersistentData\Configs\installed-software.txt"

    - name: Configure System Settings
      run: |
        # إعدادات النظام التي تريد حفظها
        $systemSettings = @"
Windows Registry Editor Version 5.00

[HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer]
"ShowSuperHidden"="1"

[HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced]
"Hidden"="1"
"ShowCompColor"="1"
"HideFileExt"="0"

[HKEY_CURRENT_USER\Control Panel\Desktop]
"Wallpaper"=""
"@
        
        $systemSettings | Out-File "C:\PersistentData\Configs\system-settings.reg" -Encoding ASCII
        reg import "C:\PersistentData\Configs\system-settings.reg" 2>$null

    - name: Create Auto-Save Script
      run: |
        # إنشاء سكريبت للحفظ التلقائي
        $autoSaveScript = @'
# Auto-Save Script for RDP Session
`$sessionData = @{
    Timestamp = Get-Date
    Hostname = "$env:COMPUTERNAME"
    TailscaleIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
    InstalledSoftware = winget list
}

# حفظ بيانات الجلسة
`$sessionData | ConvertTo-Json | Out-File "C:\PersistentData\session-info.json"

# نسخ الملفات المهمة
`$importantPaths = @(
    "C:\Users\RDP\Desktop\*",
    "C:\Users\RDP\Documents\*",
    "C:\Users\RDP\Downloads\*",
    "C:\PersistentData\Configs\*"
)

Compress-Archive -Path `$importantPaths -DestinationPath "C:\PersistentData\session-backup.zip" -Force -CompressionLevel Optimal

Write-Host "✅ Session data saved: `$(`$sessionData.Timestamp)" -ForegroundColor Green
'@
        
        $autoSaveScript | Out-File "C:\PersistentData\auto-save.ps1" -Encoding UTF8

    - name: Display Connection Information
      run: |
        Write-Host ""
        Write-Host "🎯 PERSISTENT RDP SESSION READY" -ForegroundColor Green
        Write-Host "========================================" -ForegroundColor Yellow
        Write-Host "🔗 HOSTNAME: $env:FULL_HOSTNAME" -ForegroundColor Cyan
        Write-Host "🌐 DIRECT IP: $env:TAILSCALE_IP" -ForegroundColor Cyan
        Write-Host "👤 USERNAME: RDP" -ForegroundColor White
        Write-Host "🔑 PASSWORD: !QA2ws3ed" -ForegroundColor White
        Write-Host "💾 PERSISTENT STORAGE: ENABLED" -ForegroundColor Green
        Write-Host "========================================" -ForegroundColor Yellow
        Write-Host ""
        Write-Host "💡 CONNECT USING:" -ForegroundColor Magenta
        Write-Host "mstsc /v:$env:FULL_HOSTNAME:3389" -ForegroundColor White
        Write-Host "mstsc /v:$env:TAILSCALE_IP:5555" -ForegroundColor White
        Write-Host ""
        Write-Host "📁 Your files are saved in C:\PersistentData\" -ForegroundColor Cyan
        Write-Host "🔄 Changes will be preserved between sessions" -ForegroundColor Cyan
        Write-Host "========================================" -ForegroundColor Yellow

    - name: Run Session with Auto-Save
      run: |
        $sessionStart = Get-Date
        $checkpointInterval = 300 # 5 دقائق
        
        while (((Get-Date) - $sessionStart).TotalMinutes -lt 350) {
            $elapsed = [math]::Round(((Get-Date) - $sessionStart).TotalMinutes, 1)
            $remaining = 350 - $elapsed
            
            # حفظ تلقائي كل 5 دقائق
            if ([math]::Round($elapsed * 60) % $checkpointInterval -eq 0) {
                Write-Host "💾 Auto-saving session data..." -ForegroundColor Yellow
                & "C:\PersistentData\auto-save.ps1"
            }
            
            Write-Host "[$(Get-Date)] RDP Active - Time left: ${remaining}m - Persistent: ✅" -ForegroundColor Green
            Start-Sleep -Seconds 60
        }

    - name: Final Session Backup
      if: always()
      run: |
        Write-Host "📦 Creating final backup before shutdown..." -ForegroundColor Yellow
        
        # تشغيل سكريبت الحفظ النهائي
        & "C:\PersistentData\auto-save.ps1"
        
        # إنشاء نسخة احتياطية نهائية
        $backupFile = "C:\PersistentData\final-backup-$(Get-Date -Format 'yyyyMMdd-HHmmss').zip"
        Compress-Archive -Path "C:\PersistentData\*" -DestinationPath $backupFile -Force
        
        Write-Host "✅ Final backup created: $backupFile" -ForegroundColor Green
        Write-Host "📊 Backup size: $([math]::Round((Get-Item $backupFile).Length/1MB, 2)) MB" -ForegroundColor Cyan
        
        # هنا يمكنك رفع النسخة إلى تخزين سحابي
        Write-Host "💡 Upload this file to cloud storage for next session" -ForegroundColor Magenta
